{"version":3,"sources":["StateProvider.js","firebase.js","Chat/Chat.js","Sidebar/SidebarChat/SidebarChat.js","Sidebar/Sidebar.js","reducer.js","Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","Chat","useState","input","setInput","seed","setSeed","roomName","setRoomName","messages","setMessages","roomId","useParams","user","useEffect","collection","doc","onSnapshot","snap","data","name","orderBy","docs","map","result","Math","floor","random","className","Avatar","src","Date","length","timestamp","toDate","toUTCString","IconButton","msg","key","message","displayName","type","onChange","e","target","placeholder","onClick","preventDefault","console","log","add","FieldValue","serverTimestamp","SidebarChat","id","addNewChat","prompt","to","Sidebar","rooms","setRooms","unsubscribe","photoURL","room","actionTypes","state","action","Login","dispatch","alt","Button","signInWithPopup","then","catch","err","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.ab8d36f4.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from 'react'\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n\r\n","import firebase from 'firebase';\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC3t73vdeDBJYS13VXeM1x_oYjER-69_2Q\",\r\n  authDomain: \"react-whatsapp-fda09.firebaseapp.com\",\r\n  databaseURL: \"https://react-whatsapp-fda09.firebaseio.com\",\r\n  projectId: \"react-whatsapp-fda09\",\r\n  storageBucket: \"react-whatsapp-fda09.appspot.com\",\r\n  messagingSenderId: \"41340406012\",\r\n  appId: \"1:41340406012:web:af024a6f82e88b99ba2f79\",\r\n  measurementId: \"G-NEV0TBBMMF\"\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport AttachFileIcon from \"@material-ui/icons/AttachFile\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport InsertEmoticonIcon from \"@material-ui/icons/InsertEmoticon\";\r\nimport { useStateValue } from \"../StateProvider\";\r\n\r\nimport \"./Chat.css\";\r\nimport { useParams } from \"react-router\";\r\nimport db from \"../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const [input, setInput] = useState(\"\");\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [roomName, setRoomName] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const { roomId } = useParams();\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  useEffect(() => {\r\n    if (roomId) {\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .onSnapshot((snap) => setRoomName(snap.data().name));\r\n      db.collection(\"rooms\")\r\n        .doc(roomId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"asc\")\r\n        .onSnapshot((snap) =>\r\n          setMessages(snap.docs.map((result) => result.data()))\r\n        );\r\n    }\r\n  }, [roomId]);\r\n\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, [roomId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"You typed, \", input);\r\n\r\n    db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n      name: user.displayName,\r\n      message: input,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>{roomName}</h3>\r\n          <p>\r\n            Last seen at{\" \"}\r\n            {new Date(messages[messages.length - 1]?.timestamp?.toDate()).toUTCString()}\r\n          </p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <SearchIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <AttachFileIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        {messages.map((msg) => (\r\n          <p\r\n            key={msg.message}\r\n            className={`chat__message ${\r\n              msg.name === user.displayName && \"chat__receiver\"\r\n            }`}\r\n          >\r\n            <span className=\"chat__name\">{msg.name}</span>\r\n            {msg.message}\r\n            <span className=\"chat__timestamp\">\r\n              {msg.timestamp?.toDate().toUTCString()}\r\n            </span>\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticonIcon />\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type a message\"\r\n          />\r\n          <button onClick={sendMessage}>Send a message</button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./SidebarChat.css\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport db from \"../../firebase\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction SidebarChat({ id, name, addNewChat }) {\r\n  // State declaration\r\n  const [seed, setSeed] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Process state values\r\n  // useEffect method fires when the component loads\r\n  useEffect(() => {\r\n    setSeed(Math.floor(Math.random() * 5000));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"rooms\")\r\n        .doc(id)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snap) =>\r\n          setMessages(snap.docs.map((result) => result.data()))\r\n        );\r\n    }\r\n  }, [id]);\r\n\r\n  const createChat = () => {\r\n    const roomName = prompt(\"Please enter a room name to chat\");\r\n\r\n    if (roomName) {\r\n      db.collection(\"rooms\").add({\r\n        name: roomName,\r\n      });\r\n    }\r\n  };\r\n\r\n  return !addNewChat ? (\r\n    <Link to={`/rooms/${id}`}>\r\n      <div className=\"sidebarChat\">\r\n        <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`} />\r\n        <div className=\"sidebarChat__info\">\r\n          <h2>{name}</h2>\r\n          <p>{messages[0]?.message}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  ) : (\r\n    <div onClick={createChat} className=\"sidebarChat\">\r\n      <h2>Add new chat</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Avatar } from '@material-ui/core';\r\nimport DonutLargeIcon from '@material-ui/icons/DonutLarge';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useStateValue } from \"../StateProvider\";\r\n\r\n// Components\r\nimport SidebarChat from './SidebarChat/SidebarChat';\r\n\r\n// Style\r\nimport './Sidebar.css';\r\n\r\n// Firebase\r\nimport db from '../firebase'\r\n\r\nfunction Sidebar() {\r\n    const [rooms, setRooms] = useState([]);\r\n    const [{user}, dispatch] = useStateValue();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = db.collection('rooms').onSnapshot(snap => (\r\n            setRooms(snap.docs.map(doc => ({\r\n                id: doc.id,\r\n                data: doc.data()\r\n            })\r\n            ))\r\n        ))\r\n\r\n        return () => {\r\n            unsubscribe();\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <IconButton>\r\n                    <Avatar src={user?.photoURL}/>\r\n                </IconButton>\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <DonutLargeIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n            <div className=\"sidebar__search\">\r\n                <div className=\"sidebar__searchContainer\">\r\n                    <SearchIcon />\r\n                    <input type=\"text\" placeholder=\"Search or start new chat\" />\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"sidebar__chats\">\r\n                <SidebarChat addNewChat />\r\n                {rooms.map(room => (\r\n                    <SidebarChat key={room.id} id={room.id} name={room.data.name} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","export const initialState = {\r\n    user: null\r\n};\r\n\r\nexport const actionTypes = {\r\n    SET_USER: \"SET_USER\"\r\n};\r\n\r\nconst reducer = (state, action) => {    \r\n    switch (action.type) {\r\n        case actionTypes.SET_USER:\r\n            return {\r\n                ...state,\r\n                user: action.user\r\n            }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;","import { Button } from '@material-ui/core';\r\nimport React from 'react'\r\nimport { auth, provider } from '../firebase';\r\nimport { actionTypes } from '../reducer';\r\nimport { useStateValue } from '../StateProvider';\r\n\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n    const [{}, dispatch] = useStateValue();\r\n\r\n    const onSignin = () => {\r\n        auth.signInWithPopup(provider)\r\n            .then((result) => {\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: result.user\r\n                });\r\n            })\r\n            .catch((err) => alert(err.message))\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__container\">\r\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg\" alt=\"Whatsapp logo\" />\r\n                <div className=\"login__text\">\r\n                    <h1>Sign in to Whatsapp</h1>\r\n                </div>\r\n                <Button onClick={onSignin}>\r\n                    Sign in with Google\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport React from 'react';\r\nimport './App.css';\r\nimport Chat from './Chat/Chat';\r\nimport Sidebar from './Sidebar/Sidebar';\r\nimport Login from \"./Login/Login\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction App() {\r\n  const [{user}, dispatch] = useStateValue(null);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n\r\n      {!user ? (\r\n        <Login />\r\n      ) : (\r\n          <div className=\"app__body\">\r\n            <Router>\r\n              <Sidebar />\r\n              <Switch>\r\n                <Route path=\"/rooms/:roomId\">\r\n                  <Chat />\r\n                </Route>\r\n                <Route path=\"/\">\r\n                  {/* <Chat /> */}\r\n                </Route>\r\n              </Switch>\r\n            </Router>\r\n          </div>\r\n        )}\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport reducer, { initialState } from \"./reducer\";\r\nimport {StateProvider} from \"./StateProvider\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState}\r\n      reducer={reducer}>\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}